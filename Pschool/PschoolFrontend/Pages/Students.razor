@page "/students"
@using PschoolFrontend.Pages.Components
@using PschoolFrontend.Pages.Entities
@inject HttpClient Http

<PageTitle>Students</PageTitle>

<h3>Students</h3>

<!-- Create New Student -->
<CreateStudentForm OnStudentCreated="HandleStudentCreated" />

<!-- Filter by Parents -->
<FilterByParentCouple ParentCouples="parentCouples" OnParentCoupleChanged="OnParentCoupleChanged" />

<!-- Students Table -->
<StudentTable Students="filteredStudents" EditingStudent="editingStudent" OnEditStudent="EditStudent" OnSaveStudent="SaveStudent" OnCancelEdit="CancelEdit" OnDeleteStudent="DeleteStudent" />

@if (error != "")
{
    <h3>Error: @error</h3>
}

@if (isLoading)
{
    <h3>Loading...</h3>
}

@code {
    private Student[]? students;
    private Student[]? filteredStudents;
    private string error = "";
    private bool isLoading = false;
    private Student? editingStudent = null;
    private int? selectedParentCoupleId;
    private ParentCouple[]? parentCouples;

    protected override async Task OnInitializedAsync()
    {
        await LoadParentCouples();
        await LoadStudents();
    }

    private async Task LoadStudents()
    {
        isLoading = true;
        try
        {
            students = await Http.GetFromJsonAsync<Student[]>("https://localhost:7081/api/students");
            FilterStudents();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private async Task LoadParentCouples()
    {
        isLoading = true;
        try
        {
            parentCouples = await Http.GetFromJsonAsync<ParentCouple[]>("https://localhost:7081/api/parentcouples");
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private async Task HandleStudentCreated()
    {
        await LoadStudents();
    }

    private async Task DeleteStudent(int id)
    {
        isLoading = true;
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7081/api/students/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadStudents();
                error = "";
            }
            else
            {
                error = response.StatusCode.ToString();
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private void EditStudent(Student student)
    {
        editingStudent = new Student
        {
            Id = student.Id,
            FirstName = student.FirstName,
            LastName = student.LastName,
            Age = student.Age,
            ParentCoupleId = student.ParentCoupleId,
            ParentCouple = student.ParentCouple
        };
    }

    private async Task SaveStudent()
    {
        if (editingStudent == null) return;

        isLoading = true;
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7081/api/students/{editingStudent.Id}", editingStudent);
            if (response.IsSuccessStatusCode)
            {
                await LoadStudents();
                editingStudent = null; // Clear the editing form
                error = "";
            }
            else
            {
                error = response.StatusCode.ToString();
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private void CancelEdit()
    {
        editingStudent = null;
    }

    private void OnParentCoupleChanged(int? selectedId)
    {
        selectedParentCoupleId = selectedId;
        FilterStudents();
    }

    private void FilterStudents()
    {
        if (students == null) return;

        if (selectedParentCoupleId.HasValue)
        {
            filteredStudents = students.Where(s => s.ParentCoupleId == selectedParentCoupleId.Value).ToArray();
        }
        else
        {
            filteredStudents = students;
        }
    }
}
