@page "/parents"
@using PschoolFrontend.Pages.Components
@using PschoolFrontend.Pages.Entities
@inject HttpClient Http

<PageTitle>Parents</PageTitle>

<h3>Parents</h3>

<!-- Create New Parent -->
<CreateParentForm OnParentCreated="HandleParentCreated" />

<!-- Create New Parent Couple -->
<CreateParentCoupleForm AvailableParents="availableParents" OnParentCoupleCreated="HandleParentCoupleCreated" />

<!-- Parents Table -->
<ParentTable Parents="parents" EditingParent="editingParent" OnEditParent="EditParent" OnSaveParent="SaveParent" OnCancelEdit="CancelEdit" OnDeleteParent="DeleteParent" />

@if (error != "")
{
    <h3>Error: @error</h3>
}

@if (isLoading)
{
    <h3>Loading...</h3>
}

@code {
    private Parent[]? parents;
    private Parent? editingParent = null;
    private Parent newParent = new Parent();
    private ParentCouple newParentCouple = new ParentCouple();
    private string error = "";
    private bool isLoading = false;
    private Parent[]? availableParents;

    protected override async Task OnInitializedAsync()
    {
        await LoadParents();
    }

    private async Task LoadParents()
    {
        isLoading = true;
        try
        {
            parents = await Http.GetFromJsonAsync<Parent[]>("https://localhost:7081/api/parents");
            availableParents = parents.Where(p => p.ParentCouple == null).ToArray();
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private async Task HandleParentCreated()
    {
        await LoadParents();
    }

    private async Task HandleParentCoupleCreated()
    {
        await LoadParents();
    }

    private async Task DeleteParent(int id)
    {
        isLoading = true;
        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7081/api/parents/{id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadParents();
                error = "";
            }
            else
            {
                error = response.StatusCode.ToString();
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private void EditParent(Parent parent)
    {
        editingParent = new Parent
        {
            Id = parent.Id,
            FirstName = parent.FirstName,
            LastName = parent.LastName,
            Username = parent.Username,
            Email = parent.Email,
            HomeAddress = parent.HomeAddress,
            Phone = parent.Phone,
            WorkPhone = parent.WorkPhone,
            HomePhone = parent.HomePhone,
            ParentCouple = parent.ParentCouple
        };
    }

    private async Task SaveParent()
    {
        if (editingParent == null) return;

        isLoading = true;
        try
        {
            var response = await Http.PutAsJsonAsync($"https://localhost:7081/api/parents/{editingParent.Id}", editingParent);
            if (response.IsSuccessStatusCode)
            {
                await LoadParents();
                editingParent = null;
                error = "";
            }
            else
            {
                error = response.StatusCode.ToString();
            }
        }
        catch (Exception e)
        {
            error = e.Message;
        }
        isLoading = false;
    }

    private void CancelEdit()
    {
        editingParent = null;
    }
}
